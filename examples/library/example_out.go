// Code generated by options-gen. DO NOT EDIT.
package main

import (
	"fmt"

	goplvalidator "github.com/go-playground/validator/v10"
	subpackage "github.com/kazhuravlev/options-gen/examples/library/sub-package"
	"golang.org/x/sync/errgroup"
)

var _validator461e464ebed9 = goplvalidator.New()

type optOptionsMeta struct {
	setter    func(o *Options)
	validator func(o *Options) error
}

func NewOptions(
	service1 *subpackage.Service1,
	s3Endpoint string,

	options ...optOptionsMeta,
) Options {
	o := Options{}
	o.service1 = service1
	o.s3Endpoint = s3Endpoint

	for i := range options {
		options[i].setter(&o)
	}

	return o
}

func WithPort(opt int) optOptionsMeta {
	return optOptionsMeta{
		setter:    func(o *Options) { o.port = opt },
		validator: _Options_portValidator,
	}
}

func (o *Options) Validate() error {
	g := new(errgroup.Group)

	g.Go(func() error {
		err := _Options_service1Validator(o)
		if err != nil {
			return fmt.Errorf("invalid value for option WithService1: %w", err)
		}
		return nil
	})
	g.Go(func() error {
		err := _Options_s3EndpointValidator(o)
		if err != nil {
			return fmt.Errorf("invalid value for option WithS3Endpoint: %w", err)
		}
		return nil
	})
	g.Go(func() error {
		err := _Options_portValidator(o)
		if err != nil {
			return fmt.Errorf("invalid value for option WithPort: %w", err)
		}
		return nil
	})
	return g.Wait()
}

func _Options_service1Validator(o *Options) error {

	if err := _validator461e464ebed9.Var(o.service1, "required"); err != nil {
		return fmt.Errorf("field `service1` did not pass the test: %w", err)
	}

	return nil
}

func _Options_s3EndpointValidator(o *Options) error {

	if err := _validator461e464ebed9.Var(o.s3Endpoint, "required,url"); err != nil {
		return fmt.Errorf("field `s3Endpoint` did not pass the test: %w", err)
	}

	return nil
}

func _Options_portValidator(o *Options) error {

	if err := _validator461e464ebed9.Var(o.port, "required,min=10"); err != nil {
		return fmt.Errorf("field `port` did not pass the test: %w", err)
	}

	return nil
}
