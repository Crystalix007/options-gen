// Code generated by options-gen. DO NOT EDIT.
package testcase

type optOptionsSetter[A comparable, B, C any, D int | string, E []A, F, G []any] func(o *Options[A, B, C, D, E, F, G])

func NewOptions[A comparable, B, C any, D int | string, E []A, F, G []any](
	options ...optOptionsSetter[A, B, C, D, E, F, G],
) Options[A, B, C, D, E, F, G] {
	o := Options[A, B, C, D, E, F, G]{}

	for _, opt := range options {
		opt(&o)
	}
	return o
}

func WithA[A comparable, B, C any, D int | string, E []A, F, G []any](opt A) optOptionsSetter[A, B, C, D, E, F, G] {
	return func(o *Options[A, B, C, D, E, F, G]) {
		o.a = opt
	}
}

func WithB[A comparable, B, C any, D int | string, E []A, F, G []any](opt B) optOptionsSetter[A, B, C, D, E, F, G] {
	return func(o *Options[A, B, C, D, E, F, G]) {
		o.b = opt
	}
}

func WithC[A comparable, B, C any, D int | string, E []A, F, G []any](opt C) optOptionsSetter[A, B, C, D, E, F, G] {
	return func(o *Options[A, B, C, D, E, F, G]) {
		o.c = opt
	}
}

func WithD[A comparable, B, C any, D int | string, E []A, F, G []any](opt D) optOptionsSetter[A, B, C, D, E, F, G] {
	return func(o *Options[A, B, C, D, E, F, G]) {
		o.d = opt
	}
}

func WithE[A comparable, B, C any, D int | string, E []A, F, G []any](opt E) optOptionsSetter[A, B, C, D, E, F, G] {
	return func(o *Options[A, B, C, D, E, F, G]) {
		o.e = opt
	}
}

func WithF[A comparable, B, C any, D int | string, E []A, F, G []any](opt F) optOptionsSetter[A, B, C, D, E, F, G] {
	return func(o *Options[A, B, C, D, E, F, G]) {
		o.f = opt
	}
}

func WithG[A comparable, B, C any, D int | string, E []A, F, G []any](opt G) optOptionsSetter[A, B, C, D, E, F, G] {
	return func(o *Options[A, B, C, D, E, F, G]) {
		o.g = opt
	}
}

func (o *Options[A, B, C, D, E, F, G]) Validate() error {
	return nil
}
