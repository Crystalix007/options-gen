// Code generated by options-gen. DO NOT EDIT.
package testcase

import (
	"fmt"

	goplvalidator "github.com/go-playground/validator/v10"
	errors461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/errors"
)

var _validator461e464ebed9 = goplvalidator.New()

type optOptionsMeta[T any] struct {
	setter    func(o *Options[T])
	validator func(o *Options[T]) error
}

func NewOptions[T any](
	ch1 chan T,
	ch2 <-chan T,

	options ...optOptionsMeta[T],
) Options[T] {
	o := Options[T]{}
	o.ch1 = ch1
	o.ch2 = ch2

	for i := range options {
		options[i].setter(&o)
	}

	return o
}

func WithCh3[T any](opt chan T) optOptionsMeta[T] {
	return optOptionsMeta[T]{
		setter:    func(o *Options[T]) { o.ch3 = opt },
		validator: _Options_ch3Validator[T],
	}
}

func WithCh4[T any](opt <-chan T) optOptionsMeta[T] {
	return optOptionsMeta[T]{
		setter:    func(o *Options[T]) { o.ch4 = opt },
		validator: _Options_ch4Validator[T],
	}
}

func (o *Options[T]) Validate() error {
	errs := new(errors461e464ebed9.ValidationErrors)

	errs.Add(errors461e464ebed9.NewValidationError("Ch1", _Options_ch1Validator(o)))
	errs.Add(errors461e464ebed9.NewValidationError("Ch2", _Options_ch2Validator(o)))
	errs.Add(errors461e464ebed9.NewValidationError("Ch3", _Options_ch3Validator(o)))
	errs.Add(errors461e464ebed9.NewValidationError("Ch4", _Options_ch4Validator(o)))
	return errs.AsError()
}

func _Options_ch1Validator[T any](o *Options[T]) error {
	if err := _validator461e464ebed9.Var(o.ch1, "required"); err != nil {
		return fmt.Errorf("field `ch1` did not pass the test: %w", err)
	}
	return nil
}

func _Options_ch2Validator[T any](o *Options[T]) error {

	return nil
}

func _Options_ch3Validator[T any](o *Options[T]) error {

	return nil
}

func _Options_ch4Validator[T any](o *Options[T]) error {

	return nil
}
