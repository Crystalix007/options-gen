// Code generated by options-gen. DO NOT EDIT.
package testcase

import (
	"fmt"
	"net/http"

	uniqprefixformultierror "github.com/hashicorp/go-multierror"
)

type optOptionsMeta struct {
	setter    func(o *Options)
	validator func(o *Options) error
}

func NewOptions(
	FnTypeParam FnType,
	FnParam func(server *http.Server) error,
	HandlerFunc http.HandlerFunc,
	Middleware func(next http.HandlerFunc) http.HandlerFunc,
	Local localFnType,

	options ...optOptionsMeta,
) Options {
	o := Options{}
	o.FnTypeParam = FnTypeParam
	o.FnParam = FnParam
	o.HandlerFunc = HandlerFunc
	o.Middleware = Middleware
	o.Local = Local

	for i := range options {
		options[i].setter(&o)
	}

	return o
}

func WithOptFnTypeParam(opt FnType) optOptionsMeta {
	return optOptionsMeta{
		setter:    func(o *Options) { o.OptFnTypeParam = opt },
		validator: _Options_OptFnTypeParamValidator,
	}
}

func WithOptFnParam(opt func(server *http.Server) error) optOptionsMeta {
	return optOptionsMeta{
		setter:    func(o *Options) { o.OptFnParam = opt },
		validator: _Options_OptFnParamValidator,
	}
}

func WithOptHandlerFunc(opt http.HandlerFunc) optOptionsMeta {
	return optOptionsMeta{
		setter:    func(o *Options) { o.OptHandlerFunc = opt },
		validator: _Options_OptHandlerFuncValidator,
	}
}

func WithOptMiddleware(opt func(next http.HandlerFunc) http.HandlerFunc) optOptionsMeta {
	return optOptionsMeta{
		setter:    func(o *Options) { o.OptMiddleware = opt },
		validator: _Options_OptMiddlewareValidator,
	}
}

func WithOptLocal(opt localFnType) optOptionsMeta {
	return optOptionsMeta{
		setter:    func(o *Options) { o.OptLocal = opt },
		validator: _Options_OptLocalValidator,
	}
}

func (o *Options) Validate() error {
	var g uniqprefixformultierror.Group

	g.Go(func() error {
		err := _Options_FnTypeParamValidator(o)
		if err != nil {
			return fmt.Errorf("invalid value for option WithFnTypeParam: %w", err)
		}
		return nil
	})
	g.Go(func() error {
		err := _Options_FnParamValidator(o)
		if err != nil {
			return fmt.Errorf("invalid value for option WithFnParam: %w", err)
		}
		return nil
	})
	g.Go(func() error {
		err := _Options_HandlerFuncValidator(o)
		if err != nil {
			return fmt.Errorf("invalid value for option WithHandlerFunc: %w", err)
		}
		return nil
	})
	g.Go(func() error {
		err := _Options_MiddlewareValidator(o)
		if err != nil {
			return fmt.Errorf("invalid value for option WithMiddleware: %w", err)
		}
		return nil
	})
	g.Go(func() error {
		err := _Options_LocalValidator(o)
		if err != nil {
			return fmt.Errorf("invalid value for option WithLocal: %w", err)
		}
		return nil
	})
	g.Go(func() error {
		err := _Options_OptFnTypeParamValidator(o)
		if err != nil {
			return fmt.Errorf("invalid value for option WithOptFnTypeParam: %w", err)
		}
		return nil
	})
	g.Go(func() error {
		err := _Options_OptFnParamValidator(o)
		if err != nil {
			return fmt.Errorf("invalid value for option WithOptFnParam: %w", err)
		}
		return nil
	})
	g.Go(func() error {
		err := _Options_OptHandlerFuncValidator(o)
		if err != nil {
			return fmt.Errorf("invalid value for option WithOptHandlerFunc: %w", err)
		}
		return nil
	})
	g.Go(func() error {
		err := _Options_OptMiddlewareValidator(o)
		if err != nil {
			return fmt.Errorf("invalid value for option WithOptMiddleware: %w", err)
		}
		return nil
	})
	g.Go(func() error {
		err := _Options_OptLocalValidator(o)
		if err != nil {
			return fmt.Errorf("invalid value for option WithOptLocal: %w", err)
		}
		return nil
	})
	return g.Wait().ErrorOrNil()
}

func _Options_FnTypeParamValidator(o *Options) error {

	return nil
}

func _Options_FnParamValidator(o *Options) error {

	return nil
}

func _Options_HandlerFuncValidator(o *Options) error {

	return nil
}

func _Options_MiddlewareValidator(o *Options) error {

	return nil
}

func _Options_LocalValidator(o *Options) error {

	return nil
}

func _Options_OptFnTypeParamValidator(o *Options) error {

	return nil
}

func _Options_OptFnParamValidator(o *Options) error {

	return nil
}

func _Options_OptHandlerFuncValidator(o *Options) error {

	return nil
}

func _Options_OptMiddlewareValidator(o *Options) error {

	return nil
}

func _Options_OptLocalValidator(o *Options) error {

	return nil
}
