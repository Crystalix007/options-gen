// Code generated by options-gen. DO NOT EDIT.
package testcase

import (
	"fmt"
	"net/http"

	goplvalidator "github.com/go-playground/validator/v10"
	errors461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/errors"
)

var _validator461e464ebed9 = goplvalidator.New()

type optionsSetter[KeyT int | string, TT any] func(o *Options[KeyT, TT])

func NewOptions[KeyT int | string, TT any](
	RequiredHandler http.Handler,
	RequiredKey KeyT,
	Handler http.Handler,
	Key KeyT,
	options ...optionsSetter[KeyT, TT],
) Options[KeyT, TT] {
	o := Options[KeyT, TT]{}
	o.RequiredHandler = RequiredHandler
	o.RequiredKey = RequiredKey
	o.Handler = Handler
	o.Key = Key

	for _, opt := range options {
		opt(&o)
	}
	return o
}

func WithOptHandler[KeyT int | string, TT any](opt http.Handler) optionsSetter[KeyT, TT] {
	return func(o *Options[KeyT, TT]) {
		o.OptHandler = opt
	}
}

func WithOptKey[KeyT int | string, TT any](opt KeyT) optionsSetter[KeyT, TT] {
	return func(o *Options[KeyT, TT]) {
		o.OptKey = opt
	}
}

func WithAnyOpt[KeyT int | string, TT any](opt TT) optionsSetter[KeyT, TT] {
	return func(o *Options[KeyT, TT]) {
		o.AnyOpt = opt
	}
}

func (o *Options[KeyT, TT]) Validate() error {
	errs := new(errors461e464ebed9.ValidationErrors)
	errs.Add(errors461e464ebed9.NewValidationError("RequiredHandler", _validate_Options_RequiredHandler[KeyT, TT](o)))
	errs.Add(errors461e464ebed9.NewValidationError("RequiredKey", _validate_Options_RequiredKey[KeyT, TT](o)))
	return errs.AsError()
}

func _validate_Options_RequiredHandler[KeyT int | string, TT any](o *Options[KeyT, TT]) error {
	if err := _validator461e464ebed9.Var(o.RequiredHandler, "required"); err != nil {
		return fmt.Errorf("field `RequiredHandler` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_RequiredKey[KeyT int | string, TT any](o *Options[KeyT, TT]) error {
	if err := _validator461e464ebed9.Var(o.RequiredKey, "required"); err != nil {
		return fmt.Errorf("field `RequiredKey` did not pass the test: %w", err)
	}
	return nil
}
